//_HADES_CLASS_DESCRIPTION 
//////////////////////////////////////////////////////////////////////////////
// HEmcParOra2Io
//
// Interface class to database Oracle for input/output of parameters needed
// by the EMC for runs since 2010
// (uses the Oracle C/C++ precompiler)
//
//////////////////////////////////////////////////////////////////////////////

using namespace std;
#include "hemcparora2io.h"
#include "hparora2set.h"
#include "hemcgeompar.h"
#include "hgeomcompositevolume.h"
#include "hora2geomdetversion.h"
#include "hora2geomobj.h"
#include "TClass.h"
#include "TList.h"
#include <iostream>
#include <iomanip>
#include <unistd.h>

#define SQLCA_STORAGE_CLASS extern
#define ORACA_STORAGE_CLASS extern

// Oracle communication area
#include <oraca.h>
// SQL Communications Area
#include <sqlca.h>

ClassImp(HEmcParOra2Io)

#define EMC_MAXSEC           6
#define EMC_MAXSECCELLS    163
#define EMC_MAXCELLS       978
#define EMC_MAXGEOMCELLS   164

HEmcParOra2Io::HEmcParOra2Io(HOra2Conn* pC) : HDetParOra2Io(pC) {
  // constructor
  // sets the name of the I/O class "HEmcParIo"
  // gets the pointer to the connection class
  fName="HEmcParIo";
  initModules=new TArrayI(EMC_MAXSEC);
  geomVers=0;
  sensVolume=0;
}

HEmcParOra2Io::~HEmcParOra2Io(void) {
  // destructor
  if (initModules) delete initModules;
  if (geomVers) delete geomVers;
  if (sensVolume) delete sensVolume; 
}

Bool_t HEmcParOra2Io::init(HParSet* pPar,Int_t* set) {
  // calls special read-function for each parameter container
  if (getRunStart(pPar)<0) {
    pPar->setInputVersion(-1,inputNumber);
    return kFALSE;
  }
  const Text_t* name=pPar->IsA()->GetName();
  if (strcmp(name,"HEmcGeomPar")==0) return read(((HEmcGeomPar*)pPar),set);
  cout<<"No read-interface to Oracle for parameter container "
      <<pPar->GetName()<<endl;
  return kFALSE;
}

Int_t HEmcParOra2Io::write(HParSet* pPar) {
  // calls the appropriate write function for the container
  if (getRunStart(pPar)<=0) return -1;
  const Text_t* name=pPar->IsA()->GetName();
  if (strcmp(name,"HEmcGeomPar")==0) return writeAlignment((HEmcGeomPar*)pPar);
  cout<<"No write-interface to Oracle for parameter container "
      <<pPar->GetName()<<endl;
  return 0;
}

Bool_t HEmcParOra2Io::read(HEmcGeomPar* pPar, Int_t* set) {
  // reads the geometry of the EMC and fills the EmcGeomPar container
  Bool_t allFound=kTRUE;
  Int_t detId=-1;
  if (!geomVers) {
    detId=getDetectorId(pPar->getDetectorName());
    geomVers=new HOra2GeomDetVersion(pPar->getDetectorName(),detId);
  } else {
    detId=geomVers->getDetectorId();
  }
  if (detId<=0) {
    allFound=kFALSE;
    delete geomVers;
    geomVers=0;
  }
  if (detId>0&&pPar->isFirstInitialization()) {
    if (!readModGeomNames(pPar,set) || !readCompGeomNames(pPar,set)) {
      allFound=kFALSE;
      pPar->clear();
    } else addGeomOraSet(pPar);
  }
  if (allFound) allFound=readDetectorGeometry(pPar,set,geomVers);
  return allFound;    
}

Bool_t HEmcParOra2Io::readModGeomNames(HEmcGeomPar* pPar,Int_t* set) {
  // reads the GEANT geometry names of all modules
  EXEC SQL BEGIN DECLARE SECTION;
    struct {
      int sec[EMC_MAXSEC];
      varchar oname[EMC_MAXSEC][9];
    } mods;
    struct {
      short sec[EMC_MAXSEC];
      short oname[EMC_MAXSEC];
    } mods_Ind;
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR DO showSqlError("readModGeomNames()");
  EXEC SQL WHENEVER NOT FOUND CONTINUE;
  EXEC SQL SELECT sector, geom_obj_name
    INTO :mods INDICATOR :mods_Ind
    FROM emc_ana2.detector_setup_at_date;
  Int_t nMods=sqlca.sqlerrd[2];
  Int_t s;
  Char_t ref[10];
  initModules->Reset();
  for(Int_t i=0;i<nMods;i++) {
    s=mods.sec[i]-1;
    HModGeomPar* pMod=pPar->getModule(s,0);
    if (pMod && set[s]) {
      if (mods_Ind.oname[i]!=-1) {
        mods.oname[i].arr[mods.oname[i].len]='\0';
        pMod->SetName((Char_t*)(mods.oname[i].arr));
        initModules->AddAt(s+1,s);
        strcpy(ref,(Char_t*)(mods.oname[i].arr));
        ref[4]='1'; // reference module in sector 1
        pMod->setRefName(ref);
        HGeomCompositeVolume* refMod=pPar->getRefVolume(0);
        if (refMod==0) {
          refMod=new HGeomCompositeVolume(pPar->getNumComponents());
          refMod->SetName(ref);
          pPar->addRefVolume(refMod,0);
        }
        pMod->setVolume(refMod);
      }
    }
  }
  Bool_t allFound=kTRUE;
  for(Int_t i=0;i<EMC_MAXSEC;i++) {
    if (set[i]>0 && initModules->At(i)==0) allFound=kFALSE;
  }
  return allFound;
}

Bool_t HEmcParOra2Io::readCompGeomNames(HEmcGeomPar* pPar,Int_t* set) {
  // reads the names of all cells in the geometry tables
  EXEC SQL BEGIN DECLARE SECTION;
    struct {
      int cell_index[EMC_MAXGEOMCELLS];
      varchar oname[EMC_MAXGEOMCELLS][9];
    } lrecG;
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR DO showSqlError("readCompGeomNames(...)");
  EXEC SQL WHENEVER NOT FOUND CONTINUE;
  EXEC SQL SELECT cell_index, geom_obj_name
    INTO :lrecG
    FROM emc_ana2.module_cell
    WHERE geom_obj_name IS NOT NULL;
  HGeomCompositeVolume* pRefMod=pPar->getRefVolume(0);
  Int_t nCells=sqlca.sqlerrd[2];
  Int_t cell=-1;
  for(Int_t k=0;k<nCells;k++) {
    lrecG.oname[k].arr[lrecG.oname[k].len]='\0';
    TString cName((Char_t*)(lrecG.oname[k].arr));    
    if (lrecG.cell_index[k] != 999) {
      cell=pPar->getCompNum(cName);
      HGeomVolume* volu=pRefMod->getComponent(cell);
      if (volu) volu->SetName(cName);
      else {
        Error("readCompGeomNames","Index for cell %s not found",cName.Data());
        return kFALSE;
      }
    } else {
      if (!sensVolume) sensVolume=new HGeomVolume();
      sensVolume->SetName(cName);
    }
  }
  return (nCells>0) ? kTRUE : kFALSE;
}

void HEmcParOra2Io::addGeomRefComponents(HDetGeomPar* pPar,TList* geomObjects) {
  // Adds the reference modules and inner components to list of geometry objets to be read
  HGeomCompositeVolume* refMod=pPar->getRefVolume(0);
  if (refMod && refMod->getNumPoints()==0) {
    geomObjects->Add(new HOra2GeomObj(refMod->GetName(),refMod,'R',0));
    for(Int_t l=0;l<refMod->getNumComponents();l++) {
      HGeomVolume* comp=refMod->getComponent(l);
      TString compName=comp->GetName();
      if (!compName.IsNull()) {
        geomObjects->Add(new HOra2GeomObj(compName,comp,'I',refMod));
      }
    }
  }
  geomObjects->Add(new HOra2GeomObj(sensVolume->GetName(),sensVolume,'C',refMod));
}

Bool_t HEmcParOra2Io::transformGeomCompositeComponents(HDetGeomPar* pPar) {
  // Replaces the name and the points of the components GTOWx by the name and points of the
  // sensitive volume GLEA
  // IMPORTANT: The actual interface expects that the coordinate systems of the "towers" GTOWx
  // and GLEA including all intermediate volumes (GTOF, GTOI, GREF) are identical. Otherwise the
  // chain of mother volumes of GLEA must be read from Oracle to find the transformation 
  // relative to the reference "tower" volume.  
  HGeomCompositeVolume* refMod=pPar->getRefVolume(0);
  Bool_t rc=kTRUE;
  if (refMod && sensVolume) {
    TString sensVoluName=sensVolume->GetName();
    Int_t nPoints=sensVolume->getNumPoints();
    HGeomVolume* refComp=refMod->getComponent(0);
    if (sensVoluName.Length()==4 && nPoints>0 && refComp) {
      for(Int_t l=0;l<refMod->getNumComponents();l++) {
        HGeomVolume* comp=refMod->getComponent(l);
        TString compName=comp->GetName();
        if (compName.Length()>0) {
          comp->SetName(compName.Replace(0,4,sensVoluName));
          comp->createPoints(nPoints);
          for (Int_t i=0;i<nPoints;i++) comp->setPoint(i,*(sensVolume->getPoint(i)));
        }
      }
    } else rc=kFALSE;
  } else rc=kFALSE;
  return rc;
}
