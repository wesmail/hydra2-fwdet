###############################################################################
#
#  Example of a configuration file for DST Production
#
#  The file contains "key = value" pairs - one per line - which have the
#  same name as command line arguments. Some of them have a short form, too.
#  The following lines demonstrate the syntax:
#
#    ########################################
#    #
#    #  Example config file
#    #
#    ########################################
#
#    # a comment
#       # another comment
#
#    family-name = lang
#    name=simon
#    institute = GSI  # in Darmstadt
#
#    street =  # this line (null assignment) is ILLEGAL!
#
#    telephone  = 06519 / 71-2914
#       fax= "06159 / 71-2989" 
#    --email = 's.lang@gsi.de'
#
#  The corresponding command line would look like this,
#  --family-name=lang --name=simon --telephone="06159 / 71-2914" ...
#
#  This example file is a reference of the known keywords for DST production
#  configuration. The values set here are the default values set by the 
#  constructors of the DST library classes.
#  One can override the settings defined in such a configuration file, later
#  on command line, too. This means, that the program parameter are evaluated
#  in the following order of precedence (low to high):
#
#    1. Default parameter from constructor
#    2. Parameter read from configuration file
#    3. Parameter read from command line
#
#  '""' indicate empty strings - however, as mentioned by the above syntax
#  example they are not mandatory while assigning real values.
#
#   ALL POSSIBLE OPTION:
#
#    const struct option dst_options[] = {
#	{ "cfg-file",                  required_argument, NULL, 'f'   },
#	{ "trigger-modules",           required_argument, NULL, 32001 },
#	{ "start-detector-modules",    required_argument, NULL, 32002 },
#	{ "rich-modules",              required_argument, NULL, 32003 },
#	{ "mdc-modules",               required_argument, NULL, 32004 },
#	{ "shower-modules",            required_argument, NULL, 32005 },
#	{ "tof-modules",               required_argument, NULL, 32006 },
#	{ "rpc-modules",               required_argument, NULL, 32007 },
#	{ "wall-modules",              required_argument, NULL, 32008 },
#	{ "dst-id",                    required_argument, NULL, 32009 },
#	{ "exp-id",                    required_argument, NULL, 32010 },
#	{ "start-with-event",          required_argument, NULL, 'e'   },
#	{ "event-counter-interval",    required_argument, NULL, 'E'   },
#	{ "input-url",                 required_argument, NULL, 'i'   },
#	{ "embedding-input",           required_argument, NULL, 'I'   },
#	{ "output-dir",                required_argument, NULL, 'o'   },
#	{ "output-file",               required_argument, NULL, 'O'   },
#	{ "qa-output-dir",             required_argument, NULL, 'q'   },
#	{ "qa-event-interval",         required_argument, NULL, 'Q'   },
#	{ "not-persistent-categories", required_argument, NULL, 'c'   },
#	{ "disabled-categories",       required_argument, NULL, 'D'   },
#	{ "first-parameter-source",    required_argument, NULL, '1'   },
#	{ "second-parameter-source",   required_argument, NULL, '2'   },
#	{ "history-date",              required_argument, NULL, 'd'   },
#	{ "parameter-output-file",     required_argument, NULL, 'p'   },
#	{ "reference-run-id",          required_argument, NULL, 'r'   },
#	{ "num-events",                required_argument, NULL, 'n'   },
#	{ "help",                      no_argument,       NULL, 'h'   },
#	{ 0, 0, 0, 0 }
#    };
#
#  $Id: example-config-file.cfg,v 1.1.1.1 2006-09-08 07:39:37 halo Exp $
#
###############################################################################


### general settings

# The ID string of the beamtime, e.g. "sep05"
exp-id = ""

# A describing text string written to the output file header
dst-id = <unnamed>


### settings related to data input and output

# A file name or URL to name the input file (short form: -i) - the
# following strings are valid:
# file:///data/file.hld  or  /data/file.hld  (absolute path)
# file://data/file.hld   or  data/file.hld   (relative path)
# rfio://robot-host/archive/archive-path/file.hld
input-url = ""

# An existing and writable directory (short form: -o)
output-dir = ""

# An existing and writable directory (short form: -q)
qa-output-dir = ""

# A space separated list of lables usually defined in header files
# named *.def.h (short form: -c)
not-persistent-categories = ""


### settings related to parameter input and output

# Possible sources are: none, oracle, file.root (a Root file), all other
# names are treated as ASCII input files (short form: -1)
first-parameter-source = none

# Possible sources are: none, oracle, file.root (a Root file), all other
# names are treated as ASCII input files (short form: -2)
second-parameter-source = none

# The name of the .root parameter file, written if parameter data are dumped
# (short form: -p)
parameter-output-file = ""

# Needed to initialize the simulation (short form: -r)
reference-run-id = 0


### which events to process and interval definitions

# 0 means: process all events of input file (short form: -n)
num-events = 0

# First event being processed (short form: -e)
start-with-event = 0

# Number of events per progress message (short form: -E)
event-counter-interval = 100

# Number of events per QA entry (short form: -Q)
qa-event-interval = 50


### spectrometer setup (content of the realted integer arrays)

trigger-modules        = 0
start-detector-modules = 0 0 0 0 0 0 0 0 0 0
rich-modules           = 0
mdc-modules            = 0 0 0 0 0 0  0 0 0 0 0 0  0 0 0 0 0 0  0 0 0 0 0 0
shower-modules         = 0 0 0
tof-modules            = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
wall-modules           = 0
rpc-modules            = 0


### special MDC settings

mdc-test-layer = 0 0 0 0 0 0  0 0 0 0 0 0  0 0 0 0 0 0  0 0 0 0 0 0
mdc-test-level = 0 0 0 0
